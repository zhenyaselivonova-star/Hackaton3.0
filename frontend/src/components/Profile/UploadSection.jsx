import { useState, useRef } from 'react';
import { uploadAPI } from '../../services/api';

const UploadSection = ({ onAnalysisComplete }) => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const fileInputRef = useRef(null);

  const handleFileSelect = (file) => {
    if (file && file.type.startsWith('image/')) {
      setSelectedFile(file);
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  };

  const handleFileInputChange = (e) => {
    if (e.target.files.length > 0) {
      handleFileSelect(e.target.files[0]);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.currentTarget.style.backgroundColor = '#f0f7ff';
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.currentTarget.style.backgroundColor = '';
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.currentTarget.style.backgroundColor = '';

    if (e.dataTransfer.files.length > 0) {
      handleFileSelect(e.dataTransfer.files[0]);
    }
  };

  const handleAnalyze = async () => {
    if (!selectedFile) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    setLoading(true);

    try {
      const result = await uploadAPI.analyzeImage(selectedFile);
      onAnalysisComplete(result);
      setSelectedFile(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (error) {
      alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="upload-section">
      <h3>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
      <p>–ù–∞—à –ò–ò –Ω–∞–π–¥–µ—Ç –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –≤–∞—à–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</p>

      <div
        className="upload-area"
        onClick={() => fileInputRef.current?.click()}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        {selectedFile ? (
          <>
            <div className="upload-icon">‚úÖ</div>
            <p>–§–∞–π–ª "{selectedFile.name}" –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É</p>
            <small>–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</small>
          </>
        ) : (
          <>
            <div className="upload-icon">üì∑</div>
            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
          </>
        )}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileInputChange}
          accept="image/*"
          style={{ display: 'none' }}
        />
      </div>

      <div className="profile-actions">
        <button
          className="btn"
          onClick={handleAnalyze}
          disabled={!selectedFile || loading}
        >
          {loading ? '–ê–Ω–∞–ª–∏–∑...' : '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ'}
        </button>
      </div>
    </div>
  );
};

export default UploadSection;
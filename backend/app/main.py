import os
import logging
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from app.database import engine, Base, get_db
from app import models
from routes import auth, uploads, search, maps, admin
from celery import Celery
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('backend_debug.log', mode='w', encoding='utf-8')  # –õ–æ–≥ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="Building Detection API",
    description="API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π, –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∞–¥—Ä–µ—Å–æ–≤",
    version="1.0.0"
)


# Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info("=" * 50)
    logger.info(f"üì• –ù–û–í–´–ô –ó–ê–ü–†–û–°: {request.method} {request.url}")
    logger.info(f"üì° –ö–ª–∏–µ–Ω—Ç: {request.client.host}:{request.client.port}")
    logger.info(f"üéØ –ü—É—Ç—å: {request.url.path}")
    logger.info(f"üîç Query params: {dict(request.query_params)}")
    logger.info(f"üìã Headers: {dict(request.headers)}")

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if request.method in ["POST", "PUT", "PATCH"]:
        try:
            body = await request.body()
            if body:
                body_str = body.decode('utf-8')
                logger.info(f"üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ ({len(body_str)} chars): {body_str}")
            else:
                logger.info("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: –ü–£–°–¢–û")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞: {e}")

    try:
        response = await call_next(request)
        logger.info(f"üì§ –û–¢–í–ï–¢: {response.status_code}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"üìã Headers –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")

        return response
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –û–ë–†–ê–ë–û–¢–ß–ò–ö–ï: {e}")
        raise


# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger.info("üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

# –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã localhost
cors_origins = [
    "http://localhost:3000",
    "http://localhost:3001",
    "http://localhost:3002",
    "http://localhost:3003",
    "http://localhost:3004",
    "http://localhost:3005",
    "http://localhost:3006",
    "http://localhost:3007",
    "http://localhost:3008",
    "http://localhost:3009",
    "http://localhost:3010",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
    "http://127.0.0.1:3002",
    "http://127.0.0.1:3003",
    "http://127.0.0.1:3004",
    "http://127.0.0.1:3005",
    "http://127.0.0.1:3006",
    "http://127.0.0.1:3007",
    "http://127.0.0.1:3008",
    "http://127.0.0.1:3009",
    "http://127.0.0.1:3010",
    "http://localhost:5178",
    "http://localhost:5179",
    "http://localhost:5180",
    "http://localhost:5181",
]

logger.info(f"üåê CORS —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤ localhost (3000-3010, 5178-5181)")

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã...")
app.include_router(auth.router, prefix="/auth", tags=["auth"])
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä auth –ø–æ–¥–∫–ª—é—á–µ–Ω")
app.include_router(uploads.router, prefix="/uploads", tags=["uploads"])
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä uploads –ø–æ–¥–∫–ª—é—á–µ–Ω")
app.include_router(search.router, prefix="/search", tags=["search"])
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä search –ø–æ–¥–∫–ª—é—á–µ–Ω")
app.include_router(maps.router, prefix="/maps", tags=["maps"])
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä maps –ø–æ–¥–∫–ª—é—á–µ–Ω")
app.include_router(admin.router, prefix="/admin", tags=["admin"])
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä admin –ø–æ–¥–∫–ª—é—á–µ–Ω")

# Celery
celery = Celery(__name__,
                broker=os.getenv("CELERY_BROKER_URL"),
                backend=os.getenv("CELERY_RESULT_BACKEND"))


@app.get("/")
def root():
    logger.info("üìç –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É /")
    return {"message": "API ready. Docs: /docs"}


@app.on_event("startup")
async def startup_event():
    logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    logger.info("üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/docs")


@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")


if __name__ == "__main__":
    import uvicorn

    logger.info("üî• –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ uvicorn...")
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="debug",  # –í–∫–ª—é—á–∞–µ–º –¥–µ–±–∞–≥ –ª–æ–≥–∏ uvicorn
        access_log=True  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞
    )

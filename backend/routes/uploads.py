from fastapi import APIRouter, UploadFile, File, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import List
import shutil
from pathlib import Path
from PIL import Image
import logging
from app.database import get_db
from app.models import Task
from app.schemas import TaskResponse
from services.detection import detect_buildings, detect_scene
from services.geo import get_coords_from_image, get_address_from_coords
from services.storage import upload_to_yandex_storage
from utils.exif import extract_metadata
from app.dependencies import get_current_user

logger = logging.getLogger(__name__)
router = APIRouter()

TEMP_DIR = Path("uploads")
TEMP_DIR.mkdir(exist_ok=True)


@router.post("/", response_model=List[TaskResponse])
async def upload_files(
        files: List[UploadFile] = File(...),
        db: Session = Depends(get_db),
        current_user=Depends(get_current_user)
):
    logger.info("üì• UPLOAD ENDPOINT CALLED")
    logger.info(f"üë§ User: {current_user.id}, Files: {len(files)}")

    tasks = []

    try:
        for file in files:
            logger.info(f"üìÑ Processing file: {file.filename}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_path = TEMP_DIR / file.filename
            logger.info(f"üíæ Saving to temp: {temp_path}")

            try:
                with temp_path.open("wb") as buffer:
                    shutil.copyfileobj(file.file, buffer)
                logger.info(f"‚úÖ File saved: {temp_path}")
            except Exception as e:
                logger.error(f"‚ùå Error saving file: {e}")
                raise HTTPException(status_code=500, detail=f"Error saving file: {str(e)}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                task = await process_file(str(temp_path), db, current_user.id)
                if task:
                    tasks.append(task)
                    logger.info(f"‚úÖ File processed successfully: {file.filename}")
            except Exception as e:
                logger.error(f"‚ùå Error processing file {file.filename}: {e}")
                raise HTTPException(status_code=500, detail=f"Error processing file: {str(e)}")
            finally:
                # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    temp_path.unlink(missing_ok=True)
                    logger.info(f"üóëÔ∏è Temp file deleted: {temp_path}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Could not delete temp file: {e}")

        logger.info(f"‚úÖ UPLOAD COMPLETE: {len(tasks)} tasks created")
        return tasks

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• UNEXPECTED ERROR in upload_files: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


async def process_file(file_path: str, db: Session, user_id: int):
    logger.info(f"üîß Processing file: {file_path}")

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"üñºÔ∏è Opening image: {file_path}")
        try:
            img = Image.open(file_path)
            logger.info(f"üìê Image size: {img.width}x{img.height}, format: {img.format}")

            if img.format not in ["JPEG", "PNG"]:
                logger.info(f"üîÑ Converting image to PNG")
                converted_path = file_path + ".png"
                img.save(converted_path, "PNG")
                file_path = converted_path
                logger.info(f"‚úÖ Image converted: {file_path}")

        except Exception as e:
            logger.error(f"‚ùå Invalid image format: {e}")
            raise HTTPException(status_code=400, detail=f"Invalid image format: {str(e)}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        logger.info("üìä Extracting metadata")
        try:
            metadata = extract_metadata(file_path)
            logger.info(f"‚úÖ Metadata extracted: {metadata}")
        except Exception as e:
            logger.error(f"‚ùå Error extracting metadata: {e}")
            metadata = {}

        # –î–µ—Ç–µ–∫—Ü–∏—è –∑–¥–∞–Ω–∏–π
        logger.info("üè¢ Detecting buildings")
        try:
            bbox = detect_buildings(file_path)
            logger.info(f"‚úÖ Buildings detected: {bbox}")
        except Exception as e:
            logger.error(f"‚ùå Error detecting buildings: {e}")
            bbox = {}

        # –î–µ—Ç–µ–∫—Ü–∏—è —Å—Ü–µ–Ω—ã
        logger.info("üåÜ Detecting scene")
        try:
            scene = detect_scene(file_path)
            metadata["scene"] = scene
            logger.info(f"‚úÖ Scene detected: {scene}")
        except Exception as e:
            logger.error(f"‚ùå Error detecting scene: {e}")
            metadata["scene"] = "unknown"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        logger.info("üìç Getting coordinates")
        try:
            lat, lon = get_coords_from_image(file_path, metadata)
            logger.info(f"‚úÖ Coordinates: {lat}, {lon}")
        except Exception as e:
            logger.error(f"‚ùå Error getting coordinates: {e}")
            lat, lon = None, None

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
        logger.info("üè† Getting address")
        try:
            address = get_address_from_coords(lat, lon) if lat and lon else "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            logger.info(f"‚úÖ Address: {address}")
        except Exception as e:
            logger.error(f"‚ùå Error getting address: {e}")
            address = "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        logger.info("‚òÅÔ∏è Uploading to storage")
        try:
            storage_key = await upload_to_yandex_storage(file_path)
            logger.info(f"‚úÖ Uploaded to storage: {storage_key}")
        except Exception as e:
            logger.error(f"‚ùå Error uploading to storage: {e}")
            storage_key = f"local/{Path(file_path).name}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        logger.info("üíæ Saving to database")
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            image_metadata_with_coords = {
                **metadata,
                "latitude": lat,
                "longitude": lon
            }

            db_task = Task(
                filename=Path(file_path).name,
                original_filename=Path(file_path).name,
                storage_key=storage_key,
                status="completed",
                bbox=bbox,
                latitude=lat,
                longitude=lon,
                address=address,
                image_metadata=image_metadata_with_coords,  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                source="uploaded",
                resolution=f"{img.width}x{img.height}",
                user_id=user_id,
                processed_at=func.now()
            )
            db.add(db_task)
            db.commit()
            db.refresh(db_task)
            logger.info(f"‚úÖ Task saved to DB: {db_task.id}")
        except Exception as e:
            logger.error(f"‚ùå Error saving to database: {e}")
            db.rollback()
            raise

        # –û—á–∏—Å—Ç–∫–∞
        try:
            if file_path.endswith(".png"):
                Path(file_path).unlink(missing_ok=True)
                logger.info(f"üóëÔ∏è Converted file deleted: {file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not delete converted file: {e}")

        return db_task

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• CRITICAL ERROR in process_file: {e}", exc_info=True)
        raise
import exifread
import logging
from typing import Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def extract_metadata(file_path: str) -> dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ EXIF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        logger.info(f"üìÅ Reading metadata from: {file_path}")

        with open(file_path, "rb") as f:
            tags = exifread.process_file(f, details=False)

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã
        gps_tags = [tag for tag in tags.keys() if 'GPS' in tag]
        logger.info(f"üìä Found {len(gps_tags)} GPS tags: {gps_tags}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã exifread
        metadata = {}
        for tag, value in tags.items():
            metadata[str(tag)] = value

        logger.info(f"‚úÖ Successfully extracted {len(metadata)} metadata tags")
        return metadata

    except Exception as e:
        logger.error(f"‚ùå Error extracting metadata from {file_path}: {e}")
        return {"error": str(e)}


def parse_dms(dms_value) -> Optional[float]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥—Ä–∞–¥—É—Å—ã/–º–∏–Ω—É—Ç—ã/—Å–µ–∫—É–Ω–¥—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç exifread —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if hasattr(dms_value, 'values') and len(dms_value.values) >= 3:
            degrees = float(dms_value.values[0])
            minutes = float(dms_value.values[1])
            seconds = float(dms_value.values[2])

            result = degrees + minutes / 60 + seconds / 3600
            logger.debug(f"üìê DMS parsed: {degrees}¬∞ {minutes}' {seconds}\" -> {result}¬∞")
            return result

        else:
            logger.warning(f"‚ö†Ô∏è Unexpected DMS format: {dms_value} (type: {type(dms_value)})")
            return None

    except Exception as e:
        logger.error(f"‚ùå Error parsing DMS value {dms_value}: {e}")
        return None


def extract_exif_coords(metadata: dict) -> Optional[Tuple[float, float]]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ EXIF –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîç Checking for GPS coordinates in metadata...")

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ GPS —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        gps_tags = {k: v for k, v in metadata.items() if 'GPS' in k}
        logger.info(f"üìç Found {len(gps_tags)} GPS tags")

        for tag_name, tag_value in gps_tags.items():
            logger.debug(f"  {tag_name}: {tag_value}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–µ–≥–æ–≤
        required_tags = ['GPS GPSLatitude', 'GPS GPSLongitude']
        missing_tags = [tag for tag in required_tags if tag not in metadata]

        if missing_tags:
            logger.warning(f"‚ùå Missing required GPS tags: {missing_tags}")
            return None

        logger.info("‚úÖ Found all required GPS coordinates in EXIF")

        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat = parse_dms(metadata['GPS GPSLatitude'])
        lon = parse_dms(metadata['GPS GPSLongitude'])

        if lat is None or lon is None:
            logger.error("‚ùå Failed to parse GPS coordinates")
            return None

        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—à–∞—Ä–∏–µ
        lat_ref = metadata.get('GPS GPSLatitudeRef')
        lon_ref = metadata.get('GPS GPSLongitudeRef')

        logger.info(f"üß≠ GPS references - Lat: {lat_ref}, Lon: {lon_ref}")

        if lat_ref:
            lat_ref_str = str(lat_ref).strip()
            if lat_ref_str in ['S', 's']:
                logger.info("üîÑ Converting latitude to Southern hemisphere")
                lat = -lat

        if lon_ref:
            lon_ref_str = str(lon_ref).strip()
            if lon_ref_str in ['W', 'w']:
                logger.info("üîÑ Converting longitude to Western hemisphere")
                lon = -lon

        logger.info(f"üìç Final coordinates: {lat:.6f}, {lon:.6f}")
        return (lat, lon)

    except Exception as e:
        logger.error(f"‚ùå EXIF coordinate parsing error: {e}")
        return None


def debug_gps_structure(file_path: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã GPS –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"üîß Debugging GPS structure for: {file_path}")

    try:
        with open(file_path, "rb") as f:
            tags = exifread.process_file(f, details=False)

        gps_tags = {str(k): v for k, v in tags.items() if 'GPS' in k}

        if not gps_tags:
            logger.warning("‚ùå No GPS tags found in file")
            return

        logger.info("üìã GPS tags structure:")
        for tag_name, tag_value in gps_tags.items():
            logger.info(f"  {tag_name}:")
            logger.info(f"    Value: {tag_value}")
            logger.info(f"    Type: {type(tag_value)}")

            if hasattr(tag_value, 'values'):
                logger.info(f"    Values: {tag_value.values}")
                logger.info(f"    Values type: {[type(v) for v in tag_value.values]}")

            if hasattr(tag_value, '__dict__'):
                logger.info(f"    Dict keys: {tag_value.__dict__.keys()}")

            logger.info("    ---")

    except Exception as e:
        logger.error(f"‚ùå Debug error: {e}")


def get_image_coordinates(file_path: str) -> Optional[Tuple[float, float]]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    logger.info(f"üñºÔ∏è Processing image: {file_path}")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = extract_metadata(file_path)

    if "error" in metadata:
        logger.error(f"‚ùå Failed to extract metadata: {metadata['error']}")
        return None

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coords = extract_exif_coords(metadata)

    if coords:
        lat, lon = coords
        logger.info(f"üéØ Successfully extracted coordinates: {lat:.6f}, {lon:.6f}")
        return coords
    else:
        logger.warning("‚ùå No coordinates found in image")
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É GPS –¥–∞–Ω–Ω—ã—Ö
        debug_gps_structure(file_path)
        return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = "your_image.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É

    coordinates = get_image_coordinates(image_path)

    if coordinates:
        lat, lon = coordinates
        print(f"\nüéâ Coordinates found!")
        print(f"üìç Latitude: {lat:.6f}")
        print(f"üìç Longitude: {lon:.6f}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç
        print(f"\nüåê Map links:")
        print(f"Google Maps: https://maps.google.com/?q={lat},{lon}")
        print(f"OpenStreetMap: https://www.openstreetmap.org/?mlat={lat}&mlon={lon}")
    else:
        print("\n‚ùå No coordinates found in the image")
        print("Possible reasons:")
        print("  - Image has no GPS data")
        print("  - GPS data is corrupted")
        print("  - File is not an image with EXIF data")